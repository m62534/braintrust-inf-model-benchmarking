import { xSequentialFillFromTo } from 'ml-spectra-processing';
export function getShortestPath(options) {
    const { currUnAssCol, dualVariableForColumns, dualVariableForRows, rowAssignments, columnAssignments, matrix, } = options;
    const nbRows = matrix.rows;
    const nbColumns = matrix.columns;
    const pred = new Float64Array(nbRows);
    const scannedColumns = new Float64Array(nbColumns);
    const scannedRows = new Float64Array(nbRows);
    const rows2Scan = Array.from(xSequentialFillFromTo({ from: 0, to: nbRows - 1, size: nbRows }));
    let numRows2Scan = nbRows;
    let sink = -1;
    let delta = 0;
    let curColumn = currUnAssCol;
    const shortestPathCost = new Array(nbRows).fill(Number.POSITIVE_INFINITY);
    while (sink === -1) {
        scannedColumns[curColumn] = 1;
        let minVal = Number.POSITIVE_INFINITY;
        let closestRowScan = -1;
        for (let curRowScan = 0; curRowScan < numRows2Scan; curRowScan++) {
            const curRow = rows2Scan[curRowScan];
            const reducedCost = delta +
                matrix.get(curRow, curColumn) -
                dualVariableForColumns[curColumn] -
                dualVariableForRows[curRow];
            if (reducedCost < shortestPathCost[curRow]) {
                pred[curRow] = curColumn;
                shortestPathCost[curRow] = reducedCost;
            }
            if (shortestPathCost[curRow] < minVal) {
                minVal = shortestPathCost[curRow];
                closestRowScan = curRowScan;
            }
        }
        if (!Number.isFinite(minVal)) {
            return { dualVariableForColumns, dualVariableForRows, sink, pred };
        }
        const closestRow = rows2Scan[closestRowScan];
        scannedRows[closestRow] = 1;
        numRows2Scan -= 1;
        rows2Scan.splice(closestRowScan, 1);
        delta = shortestPathCost[closestRow];
        if (rowAssignments[closestRow] === -1) {
            sink = closestRow;
        }
        else {
            curColumn = rowAssignments[closestRow];
        }
    }
    dualVariableForColumns[currUnAssCol] += delta;
    for (let sel = 0; sel < nbColumns; sel++) {
        if (scannedColumns[sel] === 0)
            continue;
        if (sel === currUnAssCol)
            continue;
        dualVariableForColumns[sel] +=
            delta - shortestPathCost[columnAssignments[sel]];
    }
    for (let sel = 0; sel < nbRows; sel++) {
        if (scannedRows[sel] === 0)
            continue;
        dualVariableForRows[sel] -= delta - shortestPathCost[sel];
    }
    return {
        sink,
        pred,
        dualVariableForColumns,
        dualVariableForRows,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0U2hvcnRlc3RQYXRoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2dldFNob3J0ZXN0UGF0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQVc5RCxNQUFNLFVBQVUsZUFBZSxDQUFDLE9BQStCO0lBQzdELE1BQU0sRUFDSixZQUFZLEVBQ1osc0JBQXNCLEVBQ3RCLG1CQUFtQixFQUNuQixjQUFjLEVBQ2QsaUJBQWlCLEVBQ2pCLE1BQU0sR0FDUCxHQUFHLE9BQU8sQ0FBQztJQUVaLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDM0IsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztJQUVqQyxNQUFNLElBQUksR0FBRyxJQUFJLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN0QyxNQUFNLGNBQWMsR0FBRyxJQUFJLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNuRCxNQUFNLFdBQVcsR0FBRyxJQUFJLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUU3QyxNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUMxQixxQkFBcUIsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLE1BQU0sR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQ2pFLENBQUM7SUFDRixJQUFJLFlBQVksR0FBRyxNQUFNLENBQUM7SUFFMUIsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDZCxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDZCxJQUFJLFNBQVMsR0FBRyxZQUFZLENBQUM7SUFDN0IsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDMUUsT0FB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