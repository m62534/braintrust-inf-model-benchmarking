import { Matrix } from 'ml-matrix';
import { getShortestPath } from './getShortestPath';
/**
 * Implementation of Jonker-Volgenant shortest augmenting path algorithm based
 * on the publication [On implementing 2D rectangular assignment algorithms](https://doi.org/10.1109/TAES.2016.140952)
 */
export function linearSumAssignment(
/**
 * Cost matrix
 */
input, options = {}) {
    const { maximaze = true } = options;
    let matrix = Matrix.checkMatrix(input);
    let didFlip = false;
    if (matrix.columns > matrix.rows) {
        didFlip = true;
        matrix = matrix.transpose();
    }
    const nbRows = matrix.rows;
    const nbColumns = matrix.columns;
    const matrixDelta = maximaze ? matrix.max() : matrix.min();
    matrix = matrix.subtract(matrixDelta);
    if (maximaze)
        matrix = matrix.mul(-1);
    let rowAssignments = new Float64Array(nbRows).fill(-1);
    let columnAssignments = new Float64Array(nbColumns).fill(-1);
    let dualVariableForColumns = new Float64Array(nbColumns);
    let dualVariableForRows = new Float64Array(nbRows);
    for (let currUnAssCol = 0; currUnAssCol < nbColumns; currUnAssCol++) {
        const currentAugmenting = getShortestPath({
            matrix,
            currUnAssCol,
            dualVariableForColumns,
            dualVariableForRows,
            rowAssignments,
            columnAssignments,
        });
        const { sink, pred } = currentAugmenting;
        if (sink === -1) {
            return {
                rowAssignments,
                columnAssignments,
                gain: -1,
                dualVariableForColumns,
                dualVariableForRows,
            };
        }
        dualVariableForColumns = currentAugmenting.dualVariableForColumns;
        dualVariableForRows = currentAugmenting.dualVariableForRows;
        let j = sink;
        for (let i = pred[j]; true; i = pred[j]) {
            rowAssignments[j] = i;
            const h = columnAssignments[i];
            columnAssignments[i] = j;
            j = h;
            if (i === currUnAssCol)
                break;
        }
    }
    let gain = 0;
    for (let curCol = 0; curCol < nbColumns; curCol++) {
        gain += matrix.get(columnAssignments[curCol], curCol);
    }
    gain = (maximaze ? -1 : 1) * gain + matrixDelta * nbColumns;
    if (didFlip) {
        [columnAssignments, rowAssignments] = [rowAssignments, columnAssignments];
        [dualVariableForColumns, dualVariableForRows] = [
            dualVariableForRows,
            dualVariableForColumns,
        ];
    }
    return {
        rowAssignments,
        columnAssignments,
        gain,
        dualVariableForColumns,
        dualVariableForRows,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVuQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFVcEQ7OztHQUdHO0FBRUgsTUFBTSxVQUFVLG1CQUFtQjtBQUNqQzs7R0FFRztBQUNILEtBQTZCLEVBQzdCLFVBQW1CLEVBQUU7SUFFckIsTUFBTSxFQUFFLFFBQVEsR0FBRyxJQUFJLEVBQUUsR0FBRyxPQUFPLENBQUM7SUFFcEMsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2QyxJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDcEIsSUFBSSxNQUFNLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNqQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ2YsTUFBTSxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBRUQsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztJQUMzQixNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO0lBRWpDLE1BQU0sV0FBVyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDM0QsTUFBTSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdEMsSUFBSSxRQUFRO1FBQUUsTUFBTSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0QyxJQUFJLGNBQWMsR0FBZ0IsSUFBSSxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMs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